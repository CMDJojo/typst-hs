--- parse tree ---
[ Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/meta/footnote-break-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/meta/footnote-break-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 2 , column 2 )
    (Set
       (Ident (Identifier "page"))
       [ KeyValArg (Identifier "height") (Literal (Numeric 200.0 Pt)) ])
, ParBreak
, Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 4 , column 2 )
    (FuncCall
       (Ident (Identifier "lorem")) [ NormalArg (Literal (Int 5)) ])
, SoftBreak
, Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 5 , column 2 )
    (FuncCall
       (Ident (Identifier "footnote"))
       [ BlockArg
           [ Space
           , Comment
           , Space
           , Text "A"
           , Space
           , Text "simple"
           , Space
           , Text "footnote"
           , Text "."
           , SoftBreak
           , Code
               "test/typ/meta/footnote-break-00.typ"
               ( line 7 , column 4 )
               (FuncCall
                  (Ident (Identifier "footnote"))
                  [ BlockArg
                      [ Text "Well,"
                      , Space
                      , Text "not"
                      , Space
                      , Text "that"
                      , Space
                      , Text "simple"
                      , Space
                      , Ellipsis
                      ]
                  ])
           , Space
           , Comment
           ]
       ])
, SoftBreak
, Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 9 , column 2 )
    (FuncCall
       (Ident (Identifier "lorem")) [ NormalArg (Literal (Int 15)) ])
, SoftBreak
, Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 10 , column 2 )
    (FuncCall
       (Ident (Identifier "footnote"))
       [ BlockArg
           [ Text "Another"
           , Space
           , Text "footnote"
           , Text ":"
           , Space
           , Code
               "test/typ/meta/footnote-break-00.typ"
               ( line 10 , column 30 )
               (FuncCall
                  (Ident (Identifier "lorem")) [ NormalArg (Literal (Int 30)) ])
           ]
       ])
, Space
, Comment
, Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 11 , column 2 )
    (FuncCall
       (Ident (Identifier "lorem")) [ NormalArg (Literal (Int 15)) ])
, SoftBreak
, Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 12 , column 2 )
    (FuncCall
       (Ident (Identifier "footnote"))
       [ BlockArg
           [ Text "My"
           , Space
           , Text "fourth"
           , Space
           , Text "footnote"
           , Text ":"
           , Space
           , Code
               "test/typ/meta/footnote-break-00.typ"
               ( line 12 , column 32 )
               (FuncCall
                  (Ident (Identifier "lorem")) [ NormalArg (Literal (Int 50)) ])
           ]
       ])
, Space
, Comment
, Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 13 , column 2 )
    (FuncCall
       (Ident (Identifier "lorem")) [ NormalArg (Literal (Int 15)) ])
, SoftBreak
, Code
    "test/typ/meta/footnote-break-00.typ"
    ( line 14 , column 2 )
    (FuncCall
       (Ident (Identifier "footnote"))
       [ BlockArg
           [ Text "And"
           , Space
           , Text "a"
           , Space
           , Text "final"
           , Space
           , Text "footnote"
           , Text "."
           ]
       ])
, Space
, Comment
]
--- evaluated ---
{ text(body: [
]), 
  parbreak(), 
  text(body: [Lorem ipsum dolor sit amet,]), 
  text(body: [
]), 
  footnote(body: { text(body: [ ]), 
                   text(body: [ A simple footnote.
]), 
                   footnote(body: text(body: [Well, not that simple â€¦])), 
                   text(body: [ ]) }), 
  text(body: [
]), 
  text(body: [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore]), 
  text(body: [
]), 
  footnote(body: { text(body: [Another footnote: ]), 
                   text(body: [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi]) }), 
  text(body: [ ]), 
  text(body: [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore]), 
  text(body: [
]), 
  footnote(body: { text(body: [My fourth footnote: ]), 
                   text(body: [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat]) }), 
  text(body: [ ]), 
  text(body: [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore]), 
  text(body: [
]), 
  footnote(body: text(body: [And a final footnote.])), 
  text(body: [ ]) }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para []
  , Para
      [ Str "Lorem"
      , Space
      , Str "ipsum"
      , Space
      , Str "dolor"
      , Space
      , Str "sit"
      , Space
      , Str "amet,"
      , SoftBreak
      , Note
          [ Para
              [ Str "A"
              , Space
              , Str "simple"
              , Space
              , Str "footnote."
              , SoftBreak
              , Note
                  [ Para
                      [ Str "Well,"
                      , Space
                      , Str "not"
                      , Space
                      , Str "that"
                      , Space
                      , Str "simple"
                      , Space
                      , Str "\8230"
                      ]
                  ]
              ]
          ]
      , SoftBreak
      , Str "Lorem"
      , Space
      , Str "ipsum"
      , Space
      , Str "dolor"
      , Space
      , Str "sit"
      , Space
      , Str "amet,"
      , Space
      , Str "consectetur"
      , Space
      , Str "adipiscing"
      , Space
      , Str "elit,"
      , Space
      , Str "sed"
      , Space
      , Str "do"
      , Space
      , Str "eiusmod"
      , Space
      , Str "tempor"
      , Space
      , Str "incididunt"
      , Space
      , Str "ut"
      , Space
      , Str "labore"
      , SoftBreak
      , Note
          [ Para
              [ Str "Another"
              , Space
              , Str "footnote:"
              , Space
              , Str "Lorem"
              , Space
              , Str "ipsum"
              , Space
              , Str "dolor"
              , Space
              , Str "sit"
              , Space
              , Str "amet,"
              , Space
              , Str "consectetur"
              , Space
              , Str "adipiscing"
              , Space
              , Str "elit,"
              , Space
              , Str "sed"
              , Space
              , Str "do"
              , Space
              , Str "eiusmod"
              , Space
              , Str "tempor"
              , Space
              , Str "incididunt"
              , Space
              , Str "ut"
              , Space
              , Str "labore"
              , Space
              , Str "et"
              , Space
              , Str "dolore"
              , Space
              , Str "magna"
              , Space
              , Str "aliqua."
              , Space
              , Str "Ut"
              , Space
              , Str "enim"
              , Space
              , Str "ad"
              , Space
              , Str "minim"
              , Space
              , Str "veniam,"
              , Space
              , Str "quis"
              , Space
              , Str "nostrud"
              , Space
              , Str "exercitation"
              , Space
              , Str "ullamco"
              , Space
              , Str "laboris"
              , Space
              , Str "nisi"
              ]
          ]
      , Space
      , Str "Lorem"
      , Space
      , Str "ipsum"
      , Space
      , Str "dolor"
      , Space
      , Str "sit"
      , Space
      , Str "amet,"
      , Space
      , Str "consectetur"
      , Space
      , Str "adipiscing"
      , Space
      , Str "elit,"
      , Space
      , Str "sed"
      , Space
      , Str "do"
      , Space
      , Str "eiusmod"
      , Space
      , Str "tempor"
      , Space
      , Str "incididunt"
      , Space
      , Str "ut"
      , Space
      , Str "labore"
      , SoftBreak
      , Note
          [ Para
              [ Str "My"
              , Space
              , Str "fourth"
              , Space
              , Str "footnote:"
              , Space
              , Str "Lorem"
              , Space
              , Str "ipsum"
              , Space
              , Str "dolor"
              , Space
              , Str "sit"
              , Space
              , Str "amet,"
              , Space
              , Str "consectetur"
              , Space
              , Str "adipiscing"
              , Space
              , Str "elit,"
              , Space
              , Str "sed"
              , Space
              , Str "do"
              , Space
              , Str "eiusmod"
              , Space
              , Str "tempor"
              , Space
              , Str "incididunt"
              , Space
              , Str "ut"
              , Space
              , Str "labore"
              , Space
              , Str "et"
              , Space
              , Str "dolore"
              , Space
              , Str "magna"
              , Space
              , Str "aliqua."
              , Space
              , Str "Ut"
              , Space
              , Str "enim"
              , Space
              , Str "ad"
              , Space
              , Str "minim"
              , Space
              , Str "veniam,"
              , Space
              , Str "quis"
              , Space
              , Str "nostrud"
              , Space
              , Str "exercitation"
              , Space
              , Str "ullamco"
              , Space
              , Str "laboris"
              , Space
              , Str "nisi"
              , Space
              , Str "ut"
              , Space
              , Str "aliquip"
              , Space
              , Str "ex"
              , Space
              , Str "ea"
              , Space
              , Str "commodo"
              , Space
              , Str "consequat."
              , Space
              , Str "Duis"
              , Space
              , Str "aute"
              , Space
              , Str "irure"
              , Space
              , Str "dolor"
              , Space
              , Str "in"
              , Space
              , Str "reprehenderit"
              , Space
              , Str "in"
              , Space
              , Str "voluptate"
              , Space
              , Str "velit"
              , Space
              , Str "esse"
              , Space
              , Str "cillum"
              , Space
              , Str "dolore"
              , Space
              , Str "eu"
              , Space
              , Str "fugiat"
              ]
          ]
      , Space
      , Str "Lorem"
      , Space
      , Str "ipsum"
      , Space
      , Str "dolor"
      , Space
      , Str "sit"
      , Space
      , Str "amet,"
      , Space
      , Str "consectetur"
      , Space
      , Str "adipiscing"
      , Space
      , Str "elit,"
      , Space
      , Str "sed"
      , Space
      , Str "do"
      , Space
      , Str "eiusmod"
      , Space
      , Str "tempor"
      , Space
      , Str "incididunt"
      , Space
      , Str "ut"
      , Space
      , Str "labore"
      , SoftBreak
      , Note
          [ Para
              [ Str "And"
              , Space
              , Str "a"
              , Space
              , Str "final"
              , Space
              , Str "footnote."
              ]
          ]
      ]
  ]

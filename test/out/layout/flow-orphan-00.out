--- parse tree ---
[ Code
    "test/typ/layout/flow-orphan-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/layout/flow-orphan-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/layout/flow-orphan-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Code
    "test/typ/layout/flow-orphan-00.typ"
    ( line 2 , column 2 )
    (Set
       (Ident (Identifier "page"))
       [ KeyValArg (Identifier "height") (Literal (Numeric 100.0 Pt)) ])
, SoftBreak
, Code
    "test/typ/layout/flow-orphan-00.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "lorem")) [ NormalArg (Literal (Int 12)) ])
, ParBreak
, Heading 1 [ Text "Introduction" ]
, Text "This"
, Space
, Text "is"
, Space
, Text "the"
, Space
, Text "start"
, Space
, Text "and"
, Space
, Text "it"
, Space
, Text "goes"
, Space
, Text "on"
, Text "."
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  text(body: [
]), 
  text(body: [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor]), 
  parbreak(), 
  heading(body: text(body: [Introduction]), 
          level: 1), 
  text(body: [This is the start and it goes on.]), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Str "Lorem"
      , Space
      , Str "ipsum"
      , Space
      , Str "dolor"
      , Space
      , Str "sit"
      , Space
      , Str "amet,"
      , Space
      , Str "consectetur"
      , Space
      , Str "adipiscing"
      , Space
      , Str "elit,"
      , Space
      , Str "sed"
      , Space
      , Str "do"
      , Space
      , Str "eiusmod"
      , Space
      , Str "tempor"
      ]
  , Header 1 ( "" , [] , [] ) [ Str "Introduction" ]
  , Para
      [ Str "This"
      , Space
      , Str "is"
      , Space
      , Str "the"
      , Space
      , Str "start"
      , Space
      , Str "and"
      , Space
      , Str "it"
      , Space
      , Str "goes"
      , Space
      , Str "on."
      ]
  ]

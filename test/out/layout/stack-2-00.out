--- parse tree ---
[ Code
    "test/typ/layout/stack-2-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/layout/stack-2-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/layout/stack-2-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Code
    "test/typ/layout/stack-2-00.typ"
    ( line 2 , column 2 )
    (Set
       (Ident (Identifier "page"))
       [ KeyValArg (Identifier "height") (Literal (Numeric 3.5 Cm)) ])
, SoftBreak
, Code
    "test/typ/layout/stack-2-00.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "stack"))
       [ KeyValArg (Identifier "dir") (Ident (Identifier "ltr"))
       , KeyValArg (Identifier "spacing") (Literal (Numeric 1.0 Fr))
       , SpreadArg
           (For
              (BasicBind (Just (Identifier "c")))
              (Literal (String "ABCDEFGHI"))
              (Block
                 (CodeBlock
                    [ Array
                        [ Block
                            (Content
                               [ Code
                                   "test/typ/layout/stack-2-00.typ"
                                   ( line 6 , column 30 )
                                   (Ident (Identifier "c"))
                               ])
                        ]
                    ])))
       ])
, ParBreak
, Text "Hello"
, SoftBreak
, Code
    "test/typ/layout/stack-2-00.typ"
    ( line 10 , column 2 )
    (FuncCall
       (Ident (Identifier "v")) [ NormalArg (Literal (Numeric 2.0 Fr)) ])
, SoftBreak
, Text "from"
, Space
, Code
    "test/typ/layout/stack-2-00.typ"
    ( line 11 , column 7 )
    (FuncCall
       (Ident (Identifier "h")) [ NormalArg (Literal (Numeric 1.0 Fr)) ])
, Space
, Text "the"
, Space
, Code
    "test/typ/layout/stack-2-00.typ"
    ( line 11 , column 19 )
    (FuncCall
       (Ident (Identifier "h")) [ NormalArg (Literal (Numeric 1.0 Fr)) ])
, Space
, Text "wonderful"
, SoftBreak
, Code
    "test/typ/layout/stack-2-00.typ"
    ( line 12 , column 2 )
    (FuncCall
       (Ident (Identifier "v")) [ NormalArg (Literal (Numeric 1.0 Fr)) ])
, SoftBreak
, Text "World!"
, Space
, Text "\127757"
, ParBreak
]
--- evaluated ---
{ [
], 
  [
], 
  stack(children: ([A], 
                   [B], 
                   [C], 
                   [D], 
                   [E], 
                   [F], 
                   [G], 
                   [H], 
                   [I]), 
        dir: ltr, 
        spacing: 1.0fr), 
  parbreak(), 
  [Hello
], 
  v(amount: 2.0fr), 
  [
from ], 
  h(amount: 1.0fr), 
  [ the ], 
  h(amount: 1.0fr), 
  [ wonderful
], 
  v(amount: 1.0fr), 
  [
World! üåç], 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para []
  , Div
      ( "" , [] , [ ( "stack" , "ltr" ) ] )
      [ Div ( "" , [] , [] ) [ Para [ Str "A" ] ]
      , Div ( "" , [] , [] ) [ Para [ Str "B" ] ]
      , Div ( "" , [] , [] ) [ Para [ Str "C" ] ]
      , Div ( "" , [] , [] ) [ Para [ Str "D" ] ]
      , Div ( "" , [] , [] ) [ Para [ Str "E" ] ]
      , Div ( "" , [] , [] ) [ Para [ Str "F" ] ]
      , Div ( "" , [] , [] ) [ Para [ Str "G" ] ]
      , Div ( "" , [] , [] ) [ Para [ Str "H" ] ]
      , Div ( "" , [] , [] ) [ Para [ Str "I" ] ]
      ]
  , Para [ Str "Hello" ]
  , Para
      [ Str "from"
      , Space
      , Str "\8202\8193"
      , Space
      , Str "the"
      , Space
      , Str "\8202\8193"
      , Space
      , Str "wonderful"
      ]
  , Para [ Str "World!" , Space , Str "\127757" ]
  ]

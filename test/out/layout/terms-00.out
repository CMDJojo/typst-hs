--- parse tree ---
[ Code
    "test/typ/layout/terms-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/layout/terms-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/layout/terms-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/layout/terms-00.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "terms"))
       [ NormalArg
           (Array
              [ Block (Content [ Text "One" ])
              , Block (Content [ Text "First" ])
              ])
       , NormalArg
           (Array
              [ Block (Content [ Text "Two" ])
              , Block (Content [ Text "Second" ])
              ])
       ])
, ParBreak
]
--- evaluated ---
{ [
], 
  terms(children: (([One], 
                    [First]), 
                   ([Two], [Second]))), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para []
  , DefinitionList
      [ ( [ Str "One" ] , [ [ Para [ Str "First" ] ] ] )
      , ( [ Str "Two" ] , [ [ Para [ Str "Second" ] ] ] )
      ]
  ]

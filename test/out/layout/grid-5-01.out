--- parse tree ---
[ Code
    "test/typ/layout/grid-5-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/layout/grid-5-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/layout/grid-5-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/layout/grid-5-01.typ"
    ( line 3 , column 2 )
    (Set
       (Ident (Identifier "page"))
       [ KeyValArg (Identifier "height") (Literal (Numeric 2.25 Cm)) ])
, SoftBreak
, Code
    "test/typ/layout/grid-5-01.typ"
    ( line 4 , column 2 )
    (FuncCall
       (Ident (Identifier "grid"))
       [ KeyValArg (Identifier "columns") (Literal (Int 2))
       , KeyValArg (Identifier "gutter") (Literal (Numeric 10.0 Pt))
       , NormalArg
           (FuncCall
              (Ident (Identifier "align"))
              [ NormalArg (Ident (Identifier "bottom"))
              , BlockArg [ Text "A" ]
              ])
       , NormalArg
           (Block
              (Content
                 [ SoftBreak
                 , Text "Top"
                 , SoftBreak
                 , Code
                     "test/typ/layout/grid-5-01.typ"
                     ( line 10 , column 6 )
                     (FuncCall
                        (Ident (Identifier "align"))
                        [ NormalArg (Ident (Identifier "bottom"))
                        , BlockArg
                            [ SoftBreak
                            , Text "Bottom"
                            , Space
                            , HardBreak
                            , Text "Bottom"
                            , Space
                            , HardBreak
                            , Code
                                "test/typ/layout/grid-5-01.typ"
                                ( line 13 , column 8 )
                                (FuncCall
                                   (Ident (Identifier "v"))
                                   [ NormalArg (Literal (Numeric 0.0 Pt)) ])
                            , SoftBreak
                            , Text "Top"
                            , ParBreak
                            ]
                        ])
                 , ParBreak
                 ]))
       , NormalArg
           (FuncCall
              (Ident (Identifier "align"))
              [ NormalArg (Ident (Identifier "top")) , BlockArg [ Text "B" ] ])
       ])
, ParBreak
]
--- evaluated ---
{ [
], 
  [
], 
  grid(children: (align(alignment: bottom, 
                        body: [A]), 
                  { [
Top
], 
                    align(alignment: bottom, 
                          body: { [
Bottom ], 
                                  linebreak(), 
                                  [Bottom ], 
                                  linebreak(), 
                                  v(amount: 0.0pt), 
                                  [
Top], 
                                  parbreak() }), 
                    parbreak() }, 
                  align(alignment: top, 
                        body: [B])), 
       columns: 2, 
       gutter: 10.0pt), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para []
  , Table
      ( "" , [] , [] )
      (Caption Nothing [])
      [ ( AlignDefault , ColWidthDefault )
      , ( AlignDefault , ColWidthDefault )
      ]
      (TableHead ( "" , [] , [] ) [])
      [ TableBody
          ( "" , [] , [] )
          (RowHeadColumns 0)
          []
          [ Row
              ( "" , [] , [] )
              [ Cell
                  ( "" , [] , [] )
                  AlignDefault
                  (RowSpan 1)
                  (ColSpan 1)
                  [ Div ( "" , [] , [ ( "align" , "bottom" ) ] ) [ Para [ Str "A" ] ]
                  ]
              , Cell
                  ( "" , [] , [] )
                  AlignDefault
                  (RowSpan 1)
                  (ColSpan 1)
                  [ Para [ Str "Top" ]
                  , Div
                      ( "" , [] , [ ( "align" , "bottom" ) ] )
                      [ Para [ Str "Bottom" , LineBreak , Str "Bottom" , LineBreak ]
                      , Para [ Str "Top" ]
                      ]
                  ]
              ]
          , Row
              ( "" , [] , [] )
              [ Cell
                  ( "" , [] , [] )
                  AlignDefault
                  (RowSpan 1)
                  (ColSpan 1)
                  [ Div ( "" , [] , [ ( "align" , "top" ) ] ) [ Para [ Str "B" ] ] ]
              , Cell ( "" , [] , [] ) AlignDefault (RowSpan 1) (ColSpan 1) []
              ]
          ]
      ]
      (TableFoot ( "" , [] , [] ) [])
  ]

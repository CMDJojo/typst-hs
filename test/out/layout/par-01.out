--- parse tree ---
[ Code
    "test/typ/layout/par-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/layout/par-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/layout/par-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/layout/par-01.typ"
    ( line 3 , column 2 )
    (Set
       (Ident (Identifier "block"))
       [ KeyValArg (Identifier "spacing") (Literal (Numeric 1.0 Em)) ])
, SoftBreak
, Code
    "test/typ/layout/par-01.typ"
    ( line 4 , column 2 )
    (Set
       (Ident (Identifier "par"))
       [ KeyValArg (Identifier "leading") (Literal (Numeric 2.0 Pt)) ])
, SoftBreak
, Text "But,"
, Space
, Text "soft!"
, Space
, Text "what"
, Space
, Text "light"
, Space
, Text "through"
, Space
, Text "yonder"
, Space
, Text "window"
, Space
, Text "breaks?"
, ParBreak
, Text "It"
, Space
, Text "is"
, Space
, Text "the"
, Space
, Text "east,"
, Space
, Text "and"
, Space
, Text "Juliet"
, Space
, Text "is"
, Space
, Text "the"
, Space
, Text "sun"
, Text "."
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  text(body: [
]), 
  text(body: [
But, soft! what light through yonder window breaks?]), 
  parbreak(), 
  text(body: [It is the east, and Juliet is the sun.]), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Str "But,"
      , Space
      , Str "soft!"
      , Space
      , Str "what"
      , Space
      , Str "light"
      , Space
      , Str "through"
      , Space
      , Str "yonder"
      , Space
      , Str "window"
      , Space
      , Str "breaks?"
      ]
  , Para
      [ Str "It"
      , Space
      , Str "is"
      , Space
      , Str "the"
      , Space
      , Str "east,"
      , Space
      , Str "and"
      , Space
      , Str "Juliet"
      , Space
      , Str "is"
      , Space
      , Str "the"
      , Space
      , Str "sun."
      ]
  ]

--- parse tree ---
[ Code
    "test/typ/layout/list-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/layout/list-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/layout/list-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Emph [ Text "Shopping" , Space , Text "list" ]
, SoftBreak
, Code
    "test/typ/layout/list-00.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "list"))
       [ BlockArg [ Text "Apples" ]
       , BlockArg [ Text "Potatoes" ]
       , BlockArg [ Text "Juice" ]
       ])
, ParBreak
]
--- evaluated ---
{ [
], 
  emph(body: [Shopping list]), 
  [
], 
  list(children: ([Apples], 
                  [Potatoes], 
                  [Juice])), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para [ Emph [ Str "Shopping" , Space , Str "list" ] ]
  , BulletList
      [ [ Para [ Str "Apples" ] ]
      , [ Para [ Str "Potatoes" ] ]
      , [ Para [ Str "Juice" ] ]
      ]
  ]

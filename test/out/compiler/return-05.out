--- parse tree ---
[ Code
    "test/typ/compiler/return-05.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/compiler/return-05.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/return-05.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/compiler/return-05.typ"
    ( line 3 , column 2 )
    (Let (BasicBind (Just (Identifier "x"))) (Literal (Int 3)))
, SoftBreak
, Code
    "test/typ/compiler/return-05.typ"
    ( line 4 , column 2 )
    (LetFunc
       (Identifier "f")
       []
       (Block
          (Content
             [ SoftBreak
             , Text "Hello"
             , Space
             , Text "\128512"
             , SoftBreak
             , Code
                 "test/typ/compiler/return-05.typ"
                 ( line 6 , column 4 )
                 (Return (Just (Literal (String "nope"))))
             , SoftBreak
             , Text "World"
             , ParBreak
             ])))
, ParBreak
, Code
    "test/typ/compiler/return-05.typ"
    ( line 10 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg (FuncCall (Ident (Identifier "f")) [])
       , NormalArg (Literal (String "nope"))
       ])
, ParBreak
]
--- evaluated ---
{ [
], 
  [
], 
  parbreak(), 
  [‚ùå(], 
  [{ [
Hello üòÄ
], 
  [nope], 
  [
World], 
  parbreak() }], 
  [ /= ], 
  ["nope"], 
  [)], 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para []
  , Para
      [ Str "\10060({"
      , Space
      , Str "["
      , SoftBreak
      , Str "Hello"
      , Space
      , Str "\128512"
      , SoftBreak
      , Str "],"
      , SoftBreak
      , Str "[nope],"
      , SoftBreak
      , Str "["
      , SoftBreak
      , Str "World],"
      , SoftBreak
      , Str "parbreak()"
      , Space
      , Str "}"
      , Space
      , Str "/="
      , Space
      , Str "\"nope\")"
      ]
  ]

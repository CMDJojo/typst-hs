--- parse tree ---
[ Code
    "test/typ/compiler/comment-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/compiler/comment-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/comment-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Text "A"
, Comment
, Text "B"
, ParBreak
, Comment
, Text "C"
, Comment
, Text "D"
, ParBreak
, Comment
, Code
    "test/typ/compiler/comment-00.typ"
    ( line 12 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (Ident (Identifier "type")) [ NormalArg (Literal (Int 1)) ])
       , NormalArg (Literal (String "integer"))
       ])
, ParBreak
, Comment
, Comment
, SoftBreak
, Comment
, Comment
, ParBreak
, Text "E"
, ParBreak
]
--- evaluated ---
{ [
], 
  [A], 
  [B], 
  parbreak(), 
  [C], 
  [D], 
  parbreak(), 
  [âœ…], 
  parbreak(), 
  [
], 
  parbreak(), 
  [E], 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para [ Str "AB" ]
  , Para [ Str "CD" ]
  , Para [ Str "\9989" ]
  , Para []
  , Para [ Str "E" ]
  ]

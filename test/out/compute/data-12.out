--- parse tree ---
[ Code
    "test/typ/compute/data-12.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compute/data-12.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compute/data-12.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/compute/data-12.typ"
    ( line 3 , column 2 )
    (Let
       (BasicBind (Just (Identifier "data")))
       (FuncCall
          (Ident (Identifier "xml"))
          [ NormalArg (Literal (String "test/assets/files/data.xml")) ]))
, SoftBreak
, Code
    "test/typ/compute/data-12.typ"
    ( line 4 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg (Ident (Identifier "data"))
       , NormalArg
           (Array
              [ Dict
                  [ ( Identifier "tag" , Literal (String "data") )
                  , ( Identifier "attrs" , Dict [] )
                  , ( Identifier "children"
                    , Array
                        [ Literal (String "\n  ")
                        , Dict
                            [ ( Identifier "tag" , Literal (String "hello") )
                            , ( Identifier "attrs"
                              , Dict [ ( Identifier "name" , Literal (String "hi") ) ]
                              )
                            , ( Identifier "children" , Array [ Literal (String "1") ] )
                            ]
                        , Literal (String "\n  ")
                        , Dict
                            [ ( Identifier "tag" , Literal (String "data") )
                            , ( Identifier "attrs" , Dict [] )
                            , ( Identifier "children"
                              , Array
                                  [ Literal (String "\n    ")
                                  , Dict
                                      [ ( Identifier "tag" , Literal (String "hello") )
                                      , ( Identifier "attrs" , Dict [] )
                                      , ( Identifier "children"
                                        , Array [ Literal (String "World") ]
                                        )
                                      ]
                                  , Literal (String "\n    ")
                                  , Dict
                                      [ ( Identifier "tag" , Literal (String "hello") )
                                      , ( Identifier "attrs" , Dict [] )
                                      , ( Identifier "children"
                                        , Array [ Literal (String "World") ]
                                        )
                                      ]
                                  , Literal (String "\n  ")
                                  ]
                              )
                            ]
                        , Literal (String "\n")
                        ]
                    )
                  ]
              ])
       ])
, ParBreak
]
--- evaluated ---
{ [
], [
], [âœ…], parbreak() }
--- pandoc ---
Pandoc Meta { unMeta = fromList [] } [ Para [ Str "\9989" ] ]

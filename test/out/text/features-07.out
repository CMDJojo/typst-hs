--- parse tree ---
[ Code
    "test/typ/text/features-07.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/text/features-07.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/text/features-07.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/text/features-07.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "text"))
       [ KeyValArg
           (Identifier "features") (Array [ Literal (String "smcp") ])
       , BlockArg [ Text "Smcp" ]
       ])
, Space
, HardBreak
, Text "fi"
, Space
, Text "vs"
, Text "."
, Space
, Code
    "test/typ/text/features-07.typ"
    ( line 4 , column 9 )
    (FuncCall
       (Ident (Identifier "text"))
       [ KeyValArg
           (Identifier "features")
           (Dict [ ( Identifier "liga" , Literal (Int 0) ) ])
       , BlockArg [ Text "No" , Space , Text "fi" ]
       ])
, ParBreak
]
--- evaluated ---
{ [
], 
  text(body: [Smcp], 
       features: ("smcp")), 
  [ ], 
  linebreak(), 
  [fi vs. ], 
  text(body: [No fi], 
       features: (liga: 0)), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Str "Smcp"
      , LineBreak
      , Str "fi"
      , Space
      , Str "vs."
      , Space
      , Str "No"
      , Space
      , Str "fi"
      ]
  ]

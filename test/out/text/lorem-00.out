--- parse tree ---
[ Code
    "test/typ/text/lorem-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/text/lorem-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/text/lorem-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/text/lorem-00.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "lorem")) [ NormalArg (Literal (Int 19)) ])
, ParBreak
]
--- evaluated ---
{ [
], 
  [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.], 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Str "Lorem"
      , Space
      , Str "ipsum"
      , Space
      , Str "dolor"
      , Space
      , Str "sit"
      , Space
      , Str "amet,"
      , Space
      , Str "consectetur"
      , Space
      , Str "adipiscing"
      , Space
      , Str "elit,"
      , Space
      , Str "sed"
      , Space
      , Str "do"
      , Space
      , Str "eiusmod"
      , Space
      , Str "tempor"
      , Space
      , Str "incididunt"
      , Space
      , Str "ut"
      , Space
      , Str "labore"
      , Space
      , Str "et"
      , Space
      , Str "dolore"
      , Space
      , Str "magna"
      , Space
      , Str "aliqua."
      ]
  ]

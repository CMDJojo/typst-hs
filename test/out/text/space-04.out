--- parse tree ---
[ Code
    "test/typ/text/space-04.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/text/space-04.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/text/space-04.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/text/space-04.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "align"))
       [ NormalArg (Ident (Identifier "center"))
       , BlockArg
           [ Text "A"
           , Space
           , HardBreak
           , Text "B"
           , Space
           , HardBreak
           , Text "C"
           ]
       ])
, ParBreak
]
--- evaluated ---
{ [
], 
  align(alignment: center, 
        body: { [A ], 
                linebreak(), 
                [B ], 
                linebreak(), 
                [C] }), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para []
  , Div
      ( "" , [] , [ ( "align" , "center" ) ] )
      [ Para [ Str "A" , LineBreak , Str "B" , LineBreak , Str "C" ] ]
  ]

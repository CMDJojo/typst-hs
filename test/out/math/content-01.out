--- parse tree ---
[ Code
    "test/typ/math/content-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/content-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/content-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Text "x"
    , Text ":"
    , Text "="
    , MFrac
        (Code
           "test/typ/math/content-01.typ"
           ( line 3 , column 9 )
           (FuncCall
              (Ident (Identifier "table"))
              [ KeyValArg (Identifier "columns") (Literal (Int 2))
              , BlockArg [ Text "x" ]
              , BlockArg [ Text "y" ]
              ]))
        (Code
           "test/typ/math/content-01.typ"
           ( line 3 , column 33 )
           (FuncCall
              (Ident (Identifier "mat"))
              [ BlockArg [ Text "1" ]
              , BlockArg [ Text "2" ]
              , BlockArg [ Text "3" ]
              ]))
    , Text "="
    , Code
        "test/typ/math/content-01.typ"
        ( line 4 , column 9 )
        (FuncCall
           (Ident (Identifier "table"))
           [ BlockArg [ Text "A" ]
           , BlockArg [ Text "B" ]
           , BlockArg [ Text "C" ]
           ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: { [x], 
                        [:], 
                        [=], 
                        math.frac(denom: math.mat(rows: (([1], 
                                                          [2], 
                                                          [3]))), 
                                  num: table(children: ([x], 
                                                        [y]), 
                                             columns: 2)), 
                        [=], 
                        table(children: ([A], 
                                         [B], 
                                         [C])) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "x: = \\frac{\\begin{array}{ll}\nx & y\n\\end{array}}{\\begin{pmatrix}\n1 & 2 & 3\n\\end{pmatrix}} = \\begin{array}{l}\nA \\\\\nB \\\\\nC\n\\end{array}"
      ]
  ]

--- parse tree ---
[ Code
    "test/typ/math/accent-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/math/accent-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/accent-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    False
    [ Code
        "test/typ/math/accent-00.typ"
        ( line 3 , column 2 )
        (FuncCall
           (Ident (Identifier "grave"))
           [ NormalArg (Block (Content [ Text "a" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 3 , column 12 )
        (FuncCall
           (Ident (Identifier "acute"))
           [ NormalArg (Block (Content [ Text "b" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 3 , column 22 )
        (FuncCall
           (Ident (Identifier "hat"))
           [ NormalArg (Block (Content [ Text "f" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 3 , column 30 )
        (FuncCall
           (Ident (Identifier "tilde"))
           [ NormalArg (Block (Content [ Text "\167" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 3 , column 40 )
        (FuncCall
           (Ident (Identifier "macron"))
           [ NormalArg (Block (Content [ Text "\228" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 3 , column 51 )
        (FuncCall
           (Ident (Identifier "diaer"))
           [ NormalArg (Block (Content [ Text "a" ])) ])
    , Text ","
    , Text "\228"
    , HardBreak
    , Code
        "test/typ/math/accent-00.typ"
        ( line 4 , column 2 )
        (FuncCall
           (Ident (Identifier "breve"))
           [ NormalArg (Block (Content [ Text "&" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 4 , column 13 )
        (FuncCall
           (Ident (Identifier "dot"))
           [ NormalArg (Block (Content [ Text "!" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 4 , column 21 )
        (FuncCall
           (Ident (Identifier "circle"))
           [ NormalArg (Block (Content [ Text "a" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 4 , column 32 )
        (FuncCall
           (Ident (Identifier "caron"))
           [ NormalArg (Block (Content [ Text "@" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 4 , column 42 )
        (FuncCall
           (Ident (Identifier "arrow"))
           [ NormalArg (Block (Content [ Text "Z" ])) ])
    , Text ","
    , Code
        "test/typ/math/accent-00.typ"
        ( line 4 , column 52 )
        (FuncCall
           (FieldAccess (Ident (Identifier "l")) (Ident (Identifier "arrow")))
           [ NormalArg (Block (Content [ Text "Z" ])) ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: false, 
                body: { math.accent(accent: `, 
                                    base: [a]), 
                        [,], 
                        math.accent(accent: ´, 
                                    base: [b]), 
                        [,], 
                        math.accent(accent: ^, 
                                    base: [f]), 
                        [,], 
                        math.accent(accent: ∼, 
                                    base: [§]), 
                        [,], 
                        math.accent(accent: ¯, 
                                    base: [ä]), 
                        [,], 
                        math.accent(accent: ¨, 
                                    base: [a]), 
                        [,], 
                        [ä], 
                        linebreak(), 
                        math.accent(accent: ˘, 
                                    base: [&]), 
                        [,], 
                        math.accent(accent: ⋅, 
                                    base: [!]), 
                        [,], 
                        math.accent(accent: ○, 
                                    base: [a]), 
                        [,], 
                        math.accent(accent: ˇ, 
                                    base: [@]), 
                        [,], 
                        math.accent(accent: →, 
                                    base: [Z]), 
                        [,], 
                        math.accent(accent: ←, 
                                    base: [Z]) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          InlineMath
          "\\begin{array}{r}\n\\grave{a},\\acute{b},\\hat{f},\\overset{\\sim}{\167},\\overline{\228},\\overset{\168}{a},\228 \\\\\n\\breve{\\&},\\overset{\\cdot}{!},\\overset{\9675}{a},\\overset{\711}{@},\\overset{\\rightarrow}{Z},\\overset{\\leftarrow}{Z}\n\\end{array}"
      ]
  ]

--- parse tree ---
[ Code
    "test/typ/math/matrix-alignment-06.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/math/matrix-alignment-06.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/matrix-alignment-06.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Code
        "test/typ/math/matrix-alignment-06.typ"
        ( line 3 , column 3 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ ArrayArg
               [ [ MGroup Nothing Nothing [ Text "-" , Text "1" ]
                 , Text "1"
                 , Text "1"
                 ]
               , [ Text "1"
                 , MGroup Nothing Nothing [ Text "-" , Text "1" ]
                 , Text "1"
                 ]
               , [ Text "1"
                 , Text "1"
                 , MGroup Nothing Nothing [ Text "-" , Text "1" ]
                 ]
               ]
           ])
    ]
, SoftBreak
, Equation
    True
    [ Code
        "test/typ/math/matrix-alignment-06.typ"
        ( line 4 , column 3 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ ArrayArg
               [ [ MGroup Nothing Nothing [ Text "-" , Text "1" , MAlignPoint ]
                 , MGroup Nothing Nothing [ Text "1" , MAlignPoint ]
                 , MGroup Nothing Nothing [ Text "1" , MAlignPoint ]
                 ]
               , [ MGroup Nothing Nothing [ Text "1" , MAlignPoint ]
                 , MGroup Nothing Nothing [ Text "-" , Text "1" , MAlignPoint ]
                 , MGroup Nothing Nothing [ Text "1" , MAlignPoint ]
                 ]
               , [ MGroup Nothing Nothing [ Text "1" , MAlignPoint ]
                 , MGroup Nothing Nothing [ Text "1" , MAlignPoint ]
                 , MGroup Nothing Nothing [ Text "-" , Text "1" , MAlignPoint ]
                 ]
               ]
           ])
    ]
, SoftBreak
, Equation
    True
    [ Code
        "test/typ/math/matrix-alignment-06.typ"
        ( line 5 , column 3 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ ArrayArg
               [ [ MGroup Nothing Nothing [ Text "-" , Text "1" , MAlignPoint ]
                 , MGroup Nothing Nothing [ Text "1" , MAlignPoint ]
                 , MGroup Nothing Nothing [ Text "1" , MAlignPoint ]
                 ]
               , [ Text "1"
                 , MGroup Nothing Nothing [ Text "-" , Text "1" ]
                 , Text "1"
                 ]
               , [ Text "1"
                 , Text "1"
                 , MGroup Nothing Nothing [ Text "-" , Text "1" ]
                 ]
               ]
           ])
    ]
, SoftBreak
, Equation
    True
    [ Code
        "test/typ/math/matrix-alignment-06.typ"
        ( line 6 , column 3 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ ArrayArg
               [ [ MGroup Nothing Nothing [ MAlignPoint , Text "-" , Text "1" ]
                 , MGroup Nothing Nothing [ MAlignPoint , Text "1" ]
                 , MGroup Nothing Nothing [ MAlignPoint , Text "1" ]
                 ]
               , [ Text "1"
                 , MGroup Nothing Nothing [ Text "-" , Text "1" ]
                 , Text "1"
                 ]
               , [ Text "1"
                 , Text "1"
                 , MGroup Nothing Nothing [ Text "-" , Text "1" ]
                 ]
               ]
           ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: math.mat(rows: (({ [-], 
                                         [1] }, 
                                       [1], 
                                       [1]), 
                                      ([1], 
                                       { [-], [1] }, 
                                       [1]), 
                                      ([1], 
                                       [1], 
                                       { [-], [1] }))), 
                numbering: none), 
  [
], 
  math.equation(block: true, 
                body: math.mat(rows: (({ [-], 
                                         [1], 
                                         math.alignpoint() }, 
                                       { [1], 
                                         math.alignpoint() }, 
                                       { [1], 
                                         math.alignpoint() }), 
                                      ({ [1], 
                                         math.alignpoint() }, 
                                       { [-], 
                                         [1], 
                                         math.alignpoint() }, 
                                       { [1], 
                                         math.alignpoint() }), 
                                      ({ [1], 
                                         math.alignpoint() }, 
                                       { [1], 
                                         math.alignpoint() }, 
                                       { [-], 
                                         [1], 
                                         math.alignpoint() }))), 
                numbering: none), 
  [
], 
  math.equation(block: true, 
                body: math.mat(rows: (({ [-], 
                                         [1], 
                                         math.alignpoint() }, 
                                       { [1], 
                                         math.alignpoint() }, 
                                       { [1], 
                                         math.alignpoint() }), 
                                      ([1], 
                                       { [-], [1] }, 
                                       [1]), 
                                      ([1], 
                                       [1], 
                                       { [-], [1] }))), 
                numbering: none), 
  [
], 
  math.equation(block: true, 
                body: math.mat(rows: (({ math.alignpoint(), 
                                         [-], 
                                         [1] }, 
                                       { math.alignpoint(), 
                                         [1] }, 
                                       { math.alignpoint(), 
                                         [1] }), 
                                      ([1], 
                                       { [-], [1] }, 
                                       [1]), 
                                      ([1], 
                                       [1], 
                                       { [-], [1] }))), 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "\\begin{pmatrix}\n - 1 & 1 & 1 \\\\\n1 & - 1 & 1 \\\\\n1 & 1 & - 1\n\\end{pmatrix}"
      , SoftBreak
      , Math
          DisplayMath
          "\\left( \\begin{array}{rrr}\n\\begin{array}{r}\n - 1\n\\end{array} & \\begin{array}{r}\n1\n\\end{array} & \\begin{array}{r}\n1\n\\end{array} \\\\\n\\begin{array}{r}\n1\n\\end{array} & \\begin{array}{r}\n - 1\n\\end{array} & \\begin{array}{r}\n1\n\\end{array} \\\\\n\\begin{array}{r}\n1\n\\end{array} & \\begin{array}{r}\n1\n\\end{array} & \\begin{array}{r}\n - 1\n\\end{array}\n\\end{array} \\right)"
      , SoftBreak
      , Math
          DisplayMath
          "\\left( \\begin{array}{rrr}\n\\begin{array}{r}\n - 1\n\\end{array} & \\begin{array}{r}\n1\n\\end{array} & \\begin{array}{r}\n1\n\\end{array} \\\\\n1 & - 1 & 1 \\\\\n1 & 1 & - 1\n\\end{array} \\right)"
      , SoftBreak
      , Math
          DisplayMath
          "\\left( \\begin{array}{lll}\n\\begin{aligned}\n & - 1\n\\end{aligned} & \\begin{aligned}\n & 1\n\\end{aligned} & \\begin{aligned}\n & 1\n\\end{aligned} \\\\\n1 & - 1 & 1 \\\\\n1 & 1 & - 1\n\\end{array} \\right)"
      ]
  ]

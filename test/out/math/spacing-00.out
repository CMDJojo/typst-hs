--- parse tree ---
[ Code
    "test/typ/math/spacing-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/math/spacing-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/spacing-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    False
    [ Text "\228"
    , Text ","
    , Text "+"
    , Text ","
    , Text "c"
    , Text ","
    , MGroup (Just "(") (Just ")") [ Text "," ]
    ]
, Space
, HardBreak
, Equation
    False
    [ Text "="
    , Text ")"
    , Text ","
    , MGroup (Just "(") (Just ")") [ Text "+" ]
    , Text ","
    , MGroup
        (Just "{")
        (Just "}")
        [ Code
            "test/typ/math/spacing-00.typ"
            ( line 4 , column 12 )
            (Ident (Identifier "times"))
        ]
    ]
, SoftBreak
, Equation
    False
    [ Text "\10215"
    , Text "<"
    , Text "\10214"
    , Text ","
    , MGroup (Just "|") (Just "|") [ Text "-" ]
    , Text ","
    , MGroup (Just "[") Nothing [ Text "=" ]
    ]
, Space
, HardBreak
, Equation
    False
    [ Text "a"
    , Text "="
    , Text "b"
    , Text ","
    , Text "a"
    , Text "="
    , Text "="
    , Text "b"
    ]
, Space
, HardBreak
, Equation
    False [ Text "-" , Text "a" , Text "," , Text "+" , Text "a" ]
, Space
, HardBreak
, Equation
    False
    [ Text "a"
    , Code
        "test/typ/math/spacing-00.typ"
        ( line 8 , column 4 )
        (Ident (Identifier "not"))
    , Text "b"
    ]
, Space
, HardBreak
, Equation
    False
    [ Text "a"
    , Text "+"
    , Text "b"
    , Text ","
    , Text "a"
    , Text "*"
    , Text "b"
    ]
, Space
, HardBreak
, Equation
    False
    [ Code
        "test/typ/math/spacing-00.typ"
        ( line 10 , column 2 )
        (Ident (Identifier "sum"))
    , Text "x"
    , Text ","
    , Code
        "test/typ/math/spacing-00.typ"
        ( line 10 , column 9 )
        (FuncCall
           (Ident (Identifier "sum"))
           [ NormalArg (Block (Content [ Text "x" ])) ])
    ]
, Space
, HardBreak
, Equation
    False
    [ Code
        "test/typ/math/spacing-00.typ"
        ( line 11 , column 2 )
        (Ident (Identifier "sum"))
    , Code
        "test/typ/math/spacing-00.typ"
        ( line 11 , column 6 )
        (Ident (Identifier "product"))
    , Text "x"
    ]
, Space
, HardBreak
, Equation
    False
    [ MGroup
        Nothing
        Nothing
        [ Text "f" , MGroup (Just "(") (Just ")") [ Text "x" ] ]
    , Text ","
    , Code
        "test/typ/math/spacing-00.typ"
        ( line 12 , column 8 )
        (FuncCall
           (Ident (Identifier "zeta"))
           [ NormalArg (Block (Content [ Text "x" ])) ])
    , Text ","
    , MGroup
        Nothing
        Nothing
        [ Text " frac" , MGroup (Just "(") (Just ")") [ Text "x" ] ]
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: false, 
                body: { [ä], 
                        [,], 
                        [+], 
                        [,], 
                        [c], 
                        [,], 
                        math.lr(body: { [(], 
                                        [,], 
                                        [)] }) }, 
                numbering: none), 
  [ ], 
  linebreak(), 
  math.equation(block: false, 
                body: { [=], 
                        [)], 
                        [,], 
                        math.lr(body: { [(], 
                                        [+], 
                                        [)] }), 
                        [,], 
                        math.lr(body: { [{], 
                                        [×], 
                                        [}] }) }, 
                numbering: none), 
  [
], 
  math.equation(block: false, 
                body: { [⟧], 
                        [<], 
                        [⟦], 
                        [,], 
                        math.lr(body: { [|], 
                                        [-], 
                                        [|] }), 
                        [,], 
                        [[], 
                        [=] }, 
                numbering: none), 
  [ ], 
  linebreak(), 
  math.equation(block: false, 
                body: { [a], 
                        [=], 
                        [b], 
                        [,], 
                        [a], 
                        [=], 
                        [=], 
                        [b] }, 
                numbering: none), 
  [ ], 
  linebreak(), 
  math.equation(block: false, 
                body: { [-], 
                        [a], 
                        [,], 
                        [+], 
                        [a] }, 
                numbering: none), 
  [ ], 
  linebreak(), 
  math.equation(block: false, 
                body: { [a], [¬], [b] }, 
                numbering: none), 
  [ ], 
  linebreak(), 
  math.equation(block: false, 
                body: { [a], 
                        [+], 
                        [b], 
                        [,], 
                        [a], 
                        [*], 
                        [b] }, 
                numbering: none), 
  [ ], 
  linebreak(), 
  math.equation(block: false, 
                body: { [∑], 
                        [x], 
                        [,], 
                        [∑], 
                        [(], 
                        [x], 
                        [)] }, 
                numbering: none), 
  [ ], 
  linebreak(), 
  math.equation(block: false, 
                body: { [∑], [∏], [x] }, 
                numbering: none), 
  [ ], 
  linebreak(), 
  math.equation(block: false, 
                body: { [f], 
                        math.lr(body: { [(], 
                                        [x], 
                                        [)] }), 
                        [,], 
                        [ζ], 
                        [(], 
                        [x], 
                        [)], 
                        [,], 
                        [ frac], 
                        math.lr(body: { [(], 
                                        [x], 
                                        [)] }) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math InlineMath "\228, + ,c,(,)"
      , LineBreak
      , Math InlineMath "= ),( + ),\\left\\{ \\times \\right\\}"
      , SoftBreak
      , Math InlineMath "\10215 < \10214,| - |,\\lbrack ="
      , LineBreak
      , Math InlineMath "a = b,a = = b"
      , LineBreak
      , Math InlineMath "- a, + a"
      , LineBreak
      , Math InlineMath "a\\neg b"
      , LineBreak
      , Math InlineMath "a + b,a*b"
      , LineBreak
      , Math InlineMath "\\sum x,\\sum(x)"
      , LineBreak
      , Math InlineMath "\\sum\\prod x"
      , LineBreak
      , Math InlineMath "f(x),\\zeta(x),\\text{ frac}(x)"
      ]
  ]

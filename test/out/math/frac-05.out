--- parse tree ---
[ Code
    "test/typ/math/frac-05.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/frac-05.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/frac-05.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ MFrac (MFrac (Text "1") (Text "2")) (Text "3")
    , Text "="
    , MFrac
        (MGroup (Just "(") (Just ")") [ MFrac (Text "1") (Text "2") ])
        (Text "3")
    , Text "="
    , MFrac
        (Text "1") (MGroup Nothing Nothing [ MFrac (Text "2") (Text "3") ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: { math.frac(denom: [3], 
                                  num: math.frac(denom: [2], 
                                                 num: [1])), 
                        [=], 
                        math.frac(denom: [3], 
                                  num: math.frac(denom: [2], 
                                                 num: [1])), 
                        [=], 
                        math.frac(denom: math.frac(denom: [3], 
                                                   num: [2]), 
                                  num: [1]) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "\\frac{\\frac{1}{2}}{3} = \\frac{\\frac{1}{2}}{3} = \\frac{1}{\\frac{2}{3}}"
      ]
  ]

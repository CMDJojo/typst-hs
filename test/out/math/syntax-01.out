--- parse tree ---
[ Code
    "test/typ/math/syntax-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/math/syntax-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/syntax-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Code
        "test/typ/math/syntax-01.typ"
        ( line 3 , column 3 )
        (FuncCall
           (Ident (Identifier "underline"))
           [ NormalArg
               (Block
                  (Content
                     [ Text "f"
                     , Text "\8242"
                     , Text ":"
                     , Code
                         "test/typ/math/syntax-01.typ"
                         ( line 3 , column 18 )
                         (Ident (Identifier "NN"))
                     , Text "\8594"
                     , Code
                         "test/typ/math/syntax-01.typ"
                         ( line 3 , column 24 )
                         (Ident (Identifier "RR"))
                     ]))
           ])
    , HardBreak
    , Text "n"
    , Text "|"
    , Text "\8594"
    , Code
        "test/typ/math/syntax-01.typ"
        ( line 4 , column 9 )
        (FuncCall
           (Ident (Identifier "cases"))
           [ NormalArg
               (Block
                  (Content
                     [ MGroup
                         (Just "[") (Just "]") [ MGroup (Just "|") (Just "|") [ Text "1" ] ]
                     , MAlignPoint
                     , Text "if "
                     , Text "n"
                     , Text ">"
                     , Text ">"
                     , Text ">"
                     , Text "10"
                     ]))
           , NormalArg
               (Block
                  (Content
                     [ Text "2"
                     , Text "*"
                     , Text "3"
                     , MAlignPoint
                     , Text "if "
                     , Text "n"
                     , Text "\8800"
                     , Text "5"
                     ]))
           , NormalArg
               (Block
                  (Content
                     [ Text "1"
                     , Text "-"
                     , Text "0"
                     , Code
                         "test/typ/math/syntax-01.typ"
                         ( line 7 , column 11 )
                         (Ident (Identifier "thick"))
                     , MAlignPoint
                     , Text "\8230"
                     ]))
           ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: { math.underline(body: { [f], 
                                               [′], 
                                               [:], 
                                               [ℕ], 
                                               [→], 
                                               [ℝ] }), 
                        linebreak(), 
                        [n], 
                        [|], 
                        [→], 
                        math.cases(children: ({ math.lr(body: { [[], 
                                                                math.lr(body: { [|], 
                                                                                [1], 
                                                                                [|] }), 
                                                                []] }), 
                                                math.alignpoint(), 
                                                [if ], 
                                                [n], 
                                                [>], 
                                                [>], 
                                                [>], 
                                                [10] }, 
                                              { [2], 
                                                [*], 
                                                [3], 
                                                math.alignpoint(), 
                                                [if ], 
                                                [n], 
                                                [≠], 
                                                [5] }, 
                                              { [1], 
                                                [-], 
                                                [0], 
                                                [ ], 
                                                math.alignpoint(), 
                                                […] })) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "\\begin{array}{r}\n\\underline{f\\prime:{\\mathbb{N}} \\rightarrow {\\mathbb{R}}} \\\\\nn| \\rightarrow \\begin{cases}\n\\left\\lbrack |1| \\right\\rbrack & \\text{if }n > > > 10 \\\\\n2*3 & \\text{if }n \\neq 5 \\\\\n1 - 0\\: & \\ldots\n\\end{cases}\n\\end{array}"
      ]
  ]

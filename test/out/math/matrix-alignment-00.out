--- parse tree ---
[ Code
    "test/typ/math/matrix-alignment-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/matrix-alignment-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/matrix-alignment-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Code
        "test/typ/math/matrix-alignment-00.typ"
        ( line 3 , column 3 )
        (FuncCall
           (Ident (Identifier "vec"))
           [ BlockArg
               [ Text " a "
               , MAlignPoint
               , Text " a a a "
               , MAlignPoint
               , Text " a a"
               ]
           , BlockArg
               [ Text " a a "
               , MAlignPoint
               , Text " a a "
               , MAlignPoint
               , Text " a"
               ]
           , BlockArg
               [ Text " a a a "
               , MAlignPoint
               , Text " a "
               , MAlignPoint
               , Text " a a a"
               ]
           ])
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: true, 
                body: math.vec(children: ({ text(body: [ a ]), 
                                            math.alignpoint(), 
                                            text(body: [ a a a ]), 
                                            math.alignpoint(), 
                                            text(body: [ a a]) }, 
                                          { text(body: [ a a ]), 
                                            math.alignpoint(), 
                                            text(body: [ a a ]), 
                                            math.alignpoint(), 
                                            text(body: [ a]) }, 
                                          { text(body: [ a a a ]), 
                                            math.alignpoint(), 
                                            text(body: [ a ]), 
                                            math.alignpoint(), 
                                            text(body: [ a a a]) })), 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "\\begin{pmatrix}\n\\begin{array}{rlr}\n\\text{ a } & \\text{ a a a } & \\text{ a a}\n\\end{array} \\\\\n\\begin{array}{rlr}\n\\text{ a a } & \\text{ a a } & \\text{ a}\n\\end{array} \\\\\n\\begin{array}{rlr}\n\\text{ a a a } & \\text{ a } & \\text{ a a a}\n\\end{array}\n\\end{pmatrix}"
      ]
  ]

--- parse tree ---
[ Code
    "test/typ/math/accent-04.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/math/accent-04.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/accent-04.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    False
    [ Code
        "test/typ/math/accent-04.typ"
        ( line 3 , column 2 )
        (FuncCall
           (Ident (Identifier "arrow"))
           [ NormalArg (Block (Content [ Text "ABC " , Text "+" , Text "d" ]))
           ])
    , Text ","
    , Code
        "test/typ/math/accent-04.typ"
        ( line 3 , column 20 )
        (FuncCall
           (Ident (Identifier "tilde"))
           [ NormalArg
               (Block
                  (Content
                     [ Code
                         "test/typ/math/accent-04.typ"
                         ( line 3 , column 26 )
                         (Ident (Identifier "sum"))
                     ]))
           ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: false, 
                body: { math.accent(accent: →, 
                                    base: { [ABC ], 
                                            [+], 
                                            [d] }), 
                        [,], 
                        math.accent(accent: ∼, 
                                    base: [∑]) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          InlineMath
          "\\overset{\\rightarrow}{\\text{ABC } + d},\\sum\\limits^{\\sim}"
      ]
  ]

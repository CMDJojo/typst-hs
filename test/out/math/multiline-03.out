--- parse tree ---
[ Code
    "test/typ/math/multiline-03.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/multiline-03.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/multiline-03.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Text "f"
    , Text ":"
    , Text "="
    , Code
        "test/typ/math/multiline-03.typ"
        ( line 3 , column 8 )
        (FuncCall
           (Ident (Identifier "cases"))
           [ NormalArg
               (Block
                  (Content
                     [ Text "1"
                     , Text "+"
                     , Text "2"
                     , MAlignPoint
                     , Text "iff "
                     , MAlignPoint
                     , Text "x"
                     ]))
           , NormalArg
               (Block
                  (Content
                     [ Text "3" , MAlignPoint , Text "if " , MAlignPoint , Text "y" ]))
           ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: { [f], 
                        [:], 
                        [=], 
                        math.cases(children: ({ [1], 
                                                [+], 
                                                [2], 
                                                math.alignpoint(), 
                                                [iff ], 
                                                math.alignpoint(), 
                                                [x] }, 
                                              { [3], 
                                                math.alignpoint(), 
                                                [if ], 
                                                math.alignpoint(), 
                                                [y] })) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "f: = \\begin{cases}\n1 + 2 & \\begin{aligned}\n\\text{iff } & x\n\\end{aligned} \\\\\n3 & \\begin{aligned}\n\\text{if } & y\n\\end{aligned}\n\\end{cases}"
      ]
  ]

--- parse tree ---
[ Code
    "test/typ/math/underover-02.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/math/underover-02.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/underover-02.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Code
        "test/typ/math/underover-02.typ"
        ( line 3 , column 3 )
        (FuncCall
           (Ident (Identifier "underbracket"))
           [ NormalArg
               (Block
                  (Content
                     [ MGroup
                         (Just "[")
                         (Just "]")
                         [ Text "1" , Text "," , MFrac (Text "2") (Text "3") ]
                     ]))
           , NormalArg (Block (Content [ Text " relevant stuff" ]))
           ])
    , Code
        "test/typ/math/underover-02.typ"
        ( line 4 , column 11 )
        (FieldAccess
           (Ident (Identifier "long"))
           (FieldAccess
              (Ident (Identifier "double"))
              (FieldAccess
                 (Ident (Identifier "r"))
                 (FieldAccess
                    (Ident (Identifier "l")) (Ident (Identifier "arrow"))))))
    , Code
        "test/typ/math/underover-02.typ"
        ( line 5 , column 3 )
        (FuncCall
           (Ident (Identifier "overbracket"))
           [ NormalArg
               (Block
                  (Content
                     [ MGroup
                         (Just "[")
                         (Just "]")
                         [ MFrac (Text "4") (Text "5") , Text "," , Text "6" ]
                     ]))
           , NormalArg (Block (Content [ Text " irrelevant stuff" ]))
           ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: { math.underbracket(annotation: [ relevant stuff], 
                                          body: math.lr(body: { [[], 
                                                                [1], 
                                                                [,], 
                                                                math.frac(denom: [3], 
                                                                          num: [2]), 
                                                                []] })), 
                        [‚ü∫], 
                        math.overbracket(annotation: [ irrelevant stuff], 
                                         body: math.lr(body: { [[], 
                                                               math.frac(denom: [5], 
                                                                         num: [4]), 
                                                               [,], 
                                                               [6], 
                                                               []] })) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "\\underset{\\text{ relevant stuff}}{\\underset{\9141}{\\left\\lbrack {1,\\frac{2}{3}} \\right\\rbrack}} \\Longleftrightarrow \\overset{\\text{ irrelevant stuff}}{\\overset{\9140}{\\left\\lbrack {\\frac{4}{5},6} \\right\\rbrack}}"
      ]
  ]

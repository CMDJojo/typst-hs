--- parse tree ---
[ Code
    "test/typ/math/vec-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/vec-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/vec-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/math/vec-01.typ"
    ( line 3 , column 2 )
    (Set
       (FieldAccess
          (Ident (Identifier "vec")) (Ident (Identifier "math")))
       [ KeyValArg (Identifier "delim") (Literal (String "[")) ])
, SoftBreak
, Equation
    True
    [ Code
        "test/typ/math/vec-01.typ"
        ( line 4 , column 3 )
        (FuncCall
           (Ident (Identifier "vec"))
           [ NormalArg (Block (Content [ Text "1" ]))
           , NormalArg (Block (Content [ Text "2" ]))
           ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  [
], 
  math.equation(block: true, 
                body: math.vec(children: ([1], 
                                          [2]), 
                               delim: "["), 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math DisplayMath "\\begin{bmatrix}\n1 \\\\\n2\n\\end{bmatrix}" ]
  ]

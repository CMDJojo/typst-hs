--- parse tree ---
[ Code
    "test/typ/math/multiline-07.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/multiline-07.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/multiline-07.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Text " abc " , MAlignPoint , Text "=" , Text "c" , HardBreak ]
, SoftBreak
, Text "One"
, Space
, Text "trailing"
, Space
, Text "line"
, Space
, Text "break"
, Text "."
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: { [ abc ], 
                        math.alignpoint(), 
                        [=], 
                        [c], 
                        linebreak() }, 
                numbering: none), 
  [
One trailing line break.], 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath "\\begin{aligned}\n\\text{ abc } & = c\n\\end{aligned}"
      , SoftBreak
      , Str "One"
      , Space
      , Str "trailing"
      , Space
      , Str "line"
      , Space
      , Str "break."
      ]
  ]

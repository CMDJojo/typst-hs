--- parse tree ---
[ Code
    "test/typ/math/root-02.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/root-02.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/root-02.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Comment
, Equation
    False
    [ Code
        "test/typ/math/root-02.typ"
        ( line 4 , column 2 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ NormalArg (Block (Content [ Text "x" ])) ])
    ]
, SoftBreak
, Equation
    False
    [ Code
        "test/typ/math/root-02.typ"
        ( line 5 , column 2 )
        (FuncCall
           (Ident (Identifier "root"))
           [ NormalArg (Block (Content [ Text "2" ]))
           , NormalArg (Block (Content [ Text "x" ]))
           ])
    ]
, SoftBreak
, Equation
    False
    [ Code
        "test/typ/math/root-02.typ"
        ( line 6 , column 2 )
        (FuncCall
           (Ident (Identifier "root"))
           [ NormalArg (Block (Content [ Text "3" ]))
           , NormalArg (Block (Content [ Text "x" ]))
           ])
    ]
, SoftBreak
, Equation
    False
    [ Code
        "test/typ/math/root-02.typ"
        ( line 7 , column 2 )
        (FuncCall
           (Ident (Identifier "root"))
           [ NormalArg (Block (Content [ Text "4" ]))
           , NormalArg (Block (Content [ Text "x" ]))
           ])
    ]
, SoftBreak
, Equation
    False
    [ Code
        "test/typ/math/root-02.typ"
        ( line 8 , column 2 )
        (FuncCall
           (Ident (Identifier "root"))
           [ NormalArg (Block (Content [ Text "5" ]))
           , NormalArg (Block (Content [ Text "x" ]))
           ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: false, 
                body: math.sqrt(radicand: [x]), 
                numbering: none), 
  [
], 
  math.equation(block: false, 
                body: math.root(index: [2], 
                                radicand: [x]), 
                numbering: none), 
  [
], 
  math.equation(block: false, 
                body: math.root(index: [3], 
                                radicand: [x]), 
                numbering: none), 
  [
], 
  math.equation(block: false, 
                body: math.root(index: [4], 
                                radicand: [x]), 
                numbering: none), 
  [
], 
  math.equation(block: false, 
                body: math.root(index: [5], 
                                radicand: [x]), 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math InlineMath "\\sqrt{x}"
      , SoftBreak
      , Math InlineMath "\\sqrt[2]{x}"
      , SoftBreak
      , Math InlineMath "\\sqrt[3]{x}"
      , SoftBreak
      , Math InlineMath "\\sqrt[4]{x}"
      , SoftBreak
      , Math InlineMath "\\sqrt[5]{x}"
      ]
  ]

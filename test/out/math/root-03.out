--- parse tree ---
[ Code
    "test/typ/math/root-03.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/root-03.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/root-03.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Code
        "test/typ/math/root-03.typ"
        ( line 3 , column 3 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg
               [ MAttach
                   Nothing
                   (Just (Text "2"))
                   (MGroup
                      (Just "[")
                      (Just "]")
                      [ MGroup (Just "|") (Just "|") [ Text "x" ] ])
               , Text "+"
               , MAttach
                   Nothing
                   (Just (Text "2"))
                   (MGroup
                      (Just "[")
                      (Just "]")
                      [ MGroup (Just "|") (Just "|") [ Text "y" ] ])
               ]
           ])
    , Text "<"
    , MGroup
        (Just "[") (Just "]") [ MGroup (Just "|") (Just "|") [ Text "z" ] ]
    ]
, SoftBreak
, Equation
    True
    [ Text "v"
    , Text "="
    , Code
        "test/typ/math/root-03.typ"
        ( line 4 , column 7 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg
               [ MFrac
                   (MGroup (Just "(") (Just ")") [ MFrac (Text "1") (Text "2") ])
                   (MGroup Nothing Nothing [ MFrac (Text "4") (Text "5") ])
               ]
           ])
    , Text "="
    , Code
        "test/typ/math/root-03.typ"
        ( line 5 , column 6 )
        (FuncCall
           (Ident (Identifier "root"))
           [ BlockArg [ Text "3" ]
           , BlockArg
               [ MFrac
                   (MGroup
                      (Just "(")
                      (Just ")")
                      [ MFrac (MFrac (Text "1") (Text "2")) (Text "3") ])
                   (MGroup
                      Nothing Nothing [ MFrac (MFrac (Text "4") (Text "5")) (Text "6") ])
               ]
           ])
    , Text "="
    , Code
        "test/typ/math/root-03.typ"
        ( line 6 , column 6 )
        (FuncCall
           (Ident (Identifier "root"))
           [ BlockArg [ Text "4" ]
           , BlockArg
               [ MFrac
                   (MGroup
                      (Just "(")
                      (Just ")")
                      [ MFrac
                          (MGroup (Just "(") (Just ")") [ MFrac (Text "1") (Text "2") ])
                          (MGroup Nothing Nothing [ MFrac (Text "3") (Text "4") ])
                      ])
                   (MGroup
                      Nothing
                      Nothing
                      [ MFrac
                          (MGroup (Just "(") (Just ")") [ MFrac (Text "1") (Text "2") ])
                          (MGroup Nothing Nothing [ MFrac (Text "3") (Text "4") ])
                      ])
               ]
           ])
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: true, 
                body: { math.sqrt(radicand: { math.attach(b: none, 
                                                          base: math.lr(body: ({ [[], 
                                                                                 math.lr(body: ({ [|], 
                                                                                                  text(body: [x]), 
                                                                                                  [|] })), 
                                                                                 []] })), 
                                                          t: text(body: [2])), 
                                              text(body: [+]), 
                                              math.attach(b: none, 
                                                          base: math.lr(body: ({ [[], 
                                                                                 math.lr(body: ({ [|], 
                                                                                                  text(body: [y]), 
                                                                                                  [|] })), 
                                                                                 []] })), 
                                                          t: text(body: [2])) }), 
                        text(body: [<]), 
                        math.lr(body: ({ [[], 
                                         math.lr(body: ({ [|], 
                                                          text(body: [z]), 
                                                          [|] })), 
                                         []] })) }, 
                numbering: none), 
  text(body: [
]), 
  math.equation(block: true, 
                body: { text(body: [v]), 
                        text(body: [=]), 
                        math.sqrt(radicand: math.frac(denom: math.frac(denom: text(body: [5]), 
                                                                       num: text(body: [4])), 
                                                      num: math.frac(denom: text(body: [2]), 
                                                                     num: text(body: [1])))), 
                        text(body: [=]), 
                        math.root(index: text(body: [3]), 
                                  radicand: math.frac(denom: math.frac(denom: text(body: [6]), 
                                                                       num: math.frac(denom: text(body: [5]), 
                                                                                      num: text(body: [4]))), 
                                                      num: math.frac(denom: text(body: [3]), 
                                                                     num: math.frac(denom: text(body: [2]), 
                                                                                    num: text(body: [1]))))), 
                        text(body: [=]), 
                        math.root(index: text(body: [4]), 
                                  radicand: math.frac(denom: math.frac(denom: math.frac(denom: text(body: [4]), 
                                                                                        num: text(body: [3])), 
                                                                       num: math.frac(denom: text(body: [2]), 
                                                                                      num: text(body: [1]))), 
                                                      num: math.frac(denom: math.frac(denom: text(body: [4]), 
                                                                                      num: text(body: [3])), 
                                                                     num: math.frac(denom: text(body: [2]), 
                                                                                    num: text(body: [1]))))) }, 
                numbering: none), 
  parbreak() }

--- parse tree ---
[ Code
    "test/typ/math/alignment-03.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/alignment-03.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/alignment-03.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Text "a"
    , MAlignPoint
    , Text "="
    , Text "b"
    , MAlignPoint
    , Code
        "test/typ/math/alignment-03.typ"
        ( line 4 , column 9 )
        (Ident (Identifier "quad"))
    , Text "c"
    , MAlignPoint
    , Text "="
    , Text "d"
    , HardBreak
    , Text "e"
    , MAlignPoint
    , Text "="
    , Text "f"
    , MAlignPoint
    , Text "g"
    , MAlignPoint
    , Text "="
    , Text "h"
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: { [a], 
                        math.alignpoint(), 
                        [=], 
                        [b], 
                        math.alignpoint(), 
                        [â€ƒ], 
                        [c], 
                        math.alignpoint(), 
                        [=], 
                        [d], 
                        linebreak(), 
                        [e], 
                        math.alignpoint(), 
                        [=], 
                        [f], 
                        math.alignpoint(), 
                        [g], 
                        math.alignpoint(), 
                        [=], 
                        [h] }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "\\begin{aligned}\na & = b & \\quad c & = d \\\\\ne & = f & g & = h\n\\end{aligned}"
      ]
  ]

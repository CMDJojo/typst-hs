--- parse tree ---
[ Code
    "test/typ/math/op-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/op-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/op-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ MAttach
        (Just
           (MGroup
              Nothing
              Nothing
              [ Text "1" , Text "\8804" , Text "n" , Text "\8804" , Text "m" ]))
        Nothing
        (Code
           "test/typ/math/op-00.typ"
           ( line 3 , column 3 )
           (Ident (Identifier "max")))
    , Text "n"
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: true, 
                body: { math.attach(b: { text(body: [1]), 
                                         text(body: [≤]), 
                                         text(body: [n]), 
                                         text(body: [≤]), 
                                         text(body: [m]) }, 
                                    base: math.op(limits: true, 
                                                  text: "max"), 
                                    t: none), 
                        text(body: [n]) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para [ Math DisplayMath "\\max_{1 \\leq n \\leq m}n" ] ]

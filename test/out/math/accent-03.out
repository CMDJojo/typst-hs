--- parse tree ---
[ Code
    "test/typ/math/accent-03.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/math/accent-03.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/accent-03.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    False
    [ Code
        "test/typ/math/accent-03.typ"
        ( line 3 , column 2 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ NormalArg
               (Block
                  (Content
                     [ Code
                         "test/typ/math/accent-03.typ"
                         ( line 3 , column 7 )
                         (FuncCall
                            (Ident (Identifier "tilde"))
                            [ NormalArg (Block (Content [ Text "T" ])) ])
                     ]))
           ])
    , Text "+"
    , MFrac
        (Code
           "test/typ/math/accent-03.typ"
           ( line 3 , column 19 )
           (FuncCall
              (Ident (Identifier "hat"))
              [ NormalArg (Block (Content [ Text "f" ])) ]))
        (Code
           "test/typ/math/accent-03.typ"
           ( line 3 , column 26 )
           (FuncCall
              (Ident (Identifier "hat"))
              [ NormalArg (Block (Content [ Text "g" ])) ]))
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: false, 
                body: { math.sqrt(radicand: math.accent(accent: âˆ¼, 
                                                        base: [T])), 
                        [+], 
                        math.frac(denom: math.accent(accent: ^, 
                                                     base: [g]), 
                                  num: math.accent(accent: ^, 
                                                   base: [f])) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          InlineMath
          "\\sqrt{\\overset{\\sim}{T}} + \\frac{\\hat{f}}{\\hat{g}}"
      ]
  ]

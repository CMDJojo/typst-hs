--- parse tree ---
[ Code
    "test/typ/math/underover-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060("
                             , Code
                                 "test/typ/math/underover-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/underover-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Text "x"
    , Text "="
    , Code
        "test/typ/math/underover-00.typ"
        ( line 3 , column 7 )
        (FuncCall
           (Ident (Identifier "underbrace"))
           [ NormalArg
               (Block
                  (Content
                     [ Text "1"
                     , Text "+"
                     , Text "2"
                     , Text "+"
                     , Text "\8230"
                     , Text "+"
                     , Text "5"
                     ]))
           , NormalArg
               (Block
                  (Content
                     [ Code
                         "test/typ/math/underover-00.typ"
                         ( line 5 , column 3 )
                         (FuncCall
                            (Ident (Identifier "underbrace"))
                            [ NormalArg (Block (Content [ Text "numbers" ]))
                            , NormalArg (Block (Content [ Text "x" , Text "+" , Text "y" ]))
                            ])
                     ]))
           ])
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: { [x], 
                        [=], 
                        math.underbrace(annotation: math.underbrace(annotation: { [x], 
                                                                                  [+], 
                                                                                  [y] }, 
                                                                    body: [numbers]), 
                                        body: { [1], 
                                                [+], 
                                                [2], 
                                                [+], 
                                                [â€¦], 
                                                [+], 
                                                [5] }) }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "x = \\underset{\\underset{x + y}{\\underbrace{\\text{numbers}}}}{\\underbrace{1 + 2 + \\ldots + 5}}"
      ]
  ]

--- parse tree ---
[ Code
    "test/typ/math/multiline-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/multiline-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/multiline-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Text "x"
    , Text "+"
    , Text "1"
    , MAlignPoint
    , Text "="
    , MAttach Nothing (Just (Text "2")) (Text "a")
    , Text "+"
    , MAttach Nothing (Just (Text "2")) (Text "b")
    , HardBreak
    , Text "y"
    , MAlignPoint
    , Text "="
    , Text "a"
    , Text "+"
    , MAttach Nothing (Just (Text "2")) (Text "b")
    , HardBreak
    , Text "z"
    , MAlignPoint
    , Text "="
    , Code
        "test/typ/math/multiline-01.typ"
        ( line 5 , column 12 )
        (Ident (Identifier "alpha"))
    , Code
        "test/typ/math/multiline-01.typ"
        ( line 5 , column 18 )
        (Ident (Identifier "dot"))
    , Code
        "test/typ/math/multiline-01.typ"
        ( line 5 , column 22 )
        (Ident (Identifier "beta"))
    ]
, ParBreak
]
--- evaluated ---
{ [
], 
  math.equation(block: true, 
                body: { [x], 
                        [+], 
                        [1], 
                        math.alignpoint(), 
                        [=], 
                        math.attach(b: none, 
                                    base: [a], 
                                    t: [2]), 
                        [+], 
                        math.attach(b: none, 
                                    base: [b], 
                                    t: [2]), 
                        linebreak(), 
                        [y], 
                        math.alignpoint(), 
                        [=], 
                        [a], 
                        [+], 
                        math.attach(b: none, 
                                    base: [b], 
                                    t: [2]), 
                        linebreak(), 
                        [z], 
                        math.alignpoint(), 
                        [=], 
                        [α], 
                        [⋅], 
                        [β] }, 
                numbering: none), 
  parbreak() }
--- pandoc ---
Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Math
          DisplayMath
          "\\begin{aligned}\nx + 1 & = a^{2} + b^{2} \\\\\ny & = a + b^{2} \\\\\nz & = \\alpha \\cdot \\beta\n\\end{aligned}"
      ]
  ]
